The Create and Import Peripheral Wizard has generated a template for the
Coprocessor you requested:


Files and Directories generated:
--------------------------------

Thank you for using Create and Import Peripheral Wizard!

Peripheral summary

  top name       : readcop
  version        : 1.00.a
  type           : FSL master slave
  features       : 

File Summary

  - HDL source -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/pcores/readcop_v1_00_a/hdl/vhdl
  top level      : readcop.vhd

  - XPS interface -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/pcores/readcop_v1_00_a/data
  mpd            : readcop_v2_1_0.mpd
  pao            : readcop_v2_1_0.pao

  - ISE project -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/pcores/readcop_v1_00_a/devl/projnav
  ise project    : readcop.xise
  tcl script     : readcop.tcl


  - XST synthesis -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/pcores/readcop_v1_00_a/devl/synthesis
  xst script     : readcop_xst.scr
  xst project    : readcop_xst.prj

  - Misc file -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/pcores/readcop_v1_00_a/devl
  help           : README.txt
  option         : ipwiz.opt
  log            : ipwiz.log

  - Driver source -
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/drivers/readcop_v1_00_a/src
  makefile       : Makefile
  header         : readcop.h
  source         : readcop.c

  - Driver interface -
  - user needs to add these to repositories path in SDK (Xilinx Tools-->Repositories)
  /home/cc/cs150/sp13/class/cs150-ax/finalproject/drivers/readcop_v1_00_a/data
  mdd            : readcop_v2_1_0.mdd
  tcl            : readcop_v2_1_0.tcl


If the Coprocessor has both inputs and outputs, the templates implements a
simple application that does the following:

- The C driver function translates the input operands into the input FSL
interface and translates the outputs from the output FSL interface into the
output operands. Blocking reads and writes are used, hence the function
does not return until the computation is complete. This function is
written into src/readcop.c in the Driver Directory.

- The HDL core implements a simple adder that simply adds up the input words
arriving on the input FSL and outputs the result on the output FSL. This is
implemented in hdl/vhdl/readcop.vhd in the Core Directory.

If the Coprocessor only has inputs or only has outputs, half of the 
above application will be implemented. 

In your application code, you can include the driver's header file and then call
the C driver function


Customizing the generated Coprocessor
-----------------------------------------

The generated coprocessor will serve as a 'starter' example or template
to help implement your application. The following modifications may be
required:

* Modify the HDL in the core directory to implement the function required by
your application. It is very important that the ordering of the incoming and
outgoing operands in the HDL be consistent with the driver function.

* Modify the driver file (if necessary) to ensure that the input FSL is filled with
data from the input operands in the order expected by the implementation of
the function in the HDL core.

Other issues
------------
Please note the following:

- To permanently remove the coprocessor, you will need to remove the
directories indicated above.

- Please read and understand the HDL and C generated by this tool to fully
understand what you need to do to implement your coprocessor.

- If you added more HDL files to your coprocessor, or modified the generics
or ports for the HDL core, you need to run the Create and Import Peripheral wizard import
mode to import this peripheral.  The wizard will update the IP data file to relect the
changes that you made.

